<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BigDecimal的使用</title>
    <url>/blog/posts/6c0bc019/</url>
    <content><![CDATA[<h3 id="BigDecimal简介"><a href="#BigDecimal简介" class="headerlink" title="BigDecimal简介"></a>BigDecimal简介</h3><p>BigDecimal可以表示一个任意大小且精度完全准确的浮点数。<br>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。<br>双精度浮点型变量double可以处理16位有效数。<br>在实际应用中，需要对更大或者更小的数进行运算和处理。<br>float和double只能用来做科学计算或者是工程计算，<br>在商业计算中要用java.math.BigDecimal。<br>BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，<br>而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，<br>专门用来创建对象，特别是带有参数的对象。</p>
<h3 id="构造器描述"><a href="#构造器描述" class="headerlink" title="构造器描述"></a>构造器描述</h3><p>BigDecimal(int)       创建一个具有参数所指定整数值的对象。<br>BigDecimal(double) 创建一个具有参数所指定双精度值的对象。 //不推荐使用，还是会失去精度<br>BigDecimal(long)    创建一个具有参数所指定长整数值的对象。<br>BigDecimal(String) 创建一个具有参数所指定以字符串表示的数值的对象。//推荐使用</p>
<h3 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h3><table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">add(BigDecimal)</td>
<td align="left">BigDecimal对象中的值相加，然后返回这个对象。</td>
</tr>
<tr>
<td align="left">subtract(BigDecimal)</td>
<td align="left">BigDecimal对象中的值相减，然后返回这个对象。</td>
</tr>
<tr>
<td align="left">multiply(BigDecimal)</td>
<td align="left">BigDecimal对象中的值相乘，然后返回这个对象。</td>
</tr>
<tr>
<td align="left">divide(BigDecimal)</td>
<td align="left">BigDecimal对象中的值相除，然后返回这个对象。</td>
</tr>
<tr>
<td align="left">toString()</td>
<td align="left">将BigDecimal对象的数值转换成字符串。</td>
</tr>
<tr>
<td align="left">doubleValue()</td>
<td align="left">将BigDecimal对象中的值以双精度数返回。</td>
</tr>
<tr>
<td align="left">floatValue()</td>
<td align="left">将BigDecimal对象中的值以单精度数返回。</td>
</tr>
<tr>
<td align="left">longValue()</td>
<td align="left">将BigDecimal对象中的值以长整数返回。</td>
</tr>
<tr>
<td align="left">intValue()</td>
<td align="left">将BigDecimal对象中的值以整数返回。</td>
</tr>
</tbody></table>
<h4 id="scale-获取小数位数"><a href="#scale-获取小数位数" class="headerlink" title="scale() 获取小数位数"></a>scale() 获取小数位数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BigDecimal d1 = new BigDecimal(<span class="string">&quot;1.55&quot;</span>);</span><br><span class="line">System.out.println(d1.scale());   // 2,两位小数</span><br></pre></td></tr></table></figure>

<h4 id="setScale-小数位数，舍入模式-获取指定精度的值"><a href="#setScale-小数位数，舍入模式-获取指定精度的值" class="headerlink" title="setScale(小数位数，舍入模式)  获取指定精度的值"></a>setScale(小数位数，舍入模式)  获取指定精度的值</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//HALF_DOWN 截断</span><br><span class="line">System.out.println(d1.setScale(0, RoundingMode.DOWN));</span><br><span class="line">//HALF_DOWN 四舍五入</span><br><span class="line">System.out.println(d1.setScale(0, RoundingMode.HALF_UP));</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>浅析VO、DTO、PO的概念、区别和用处</title>
    <url>/blog/posts/25f7c824/</url>
    <content><![CDATA[<p>本篇文章主要一下我们经常会用到的一些对象：VO、DTO和PO。由于上次代码质检，领导说要规范命名习惯，所以就特意去查了这几个的含义<br>首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：</p>
<h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul>
<li>VO（View Object） ：通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已，但 VO 应该是抽象出的业务对象，可以和表对应，也可以不对应，这根据业务的需要。 如果锅碗瓢盆分别为对应的业务对象的话，那么整个碗柜就是一个值对象。此外，VO 也可以称为页面对象，如果称为页面对象的话，那么它所代表的将是整个页面展示层的对象，也可以由需要的业务对象进行组装而来。</li>
<li>DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</li>
<li>PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</li>
</ul>
<h5 id="l-用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。"><a href="#l-用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。" class="headerlink" title="l         用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。"></a>l         用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</h5><h5 id="l-展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。"><a href="#l-展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。" class="headerlink" title="l         展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。"></a>l         展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</h5><h5 id="l-服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。"><a href="#l-服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。" class="headerlink" title="l         服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。"></a>l         服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</h5><p>总结：根据公司的规范来定义后缀 (哈哈)</p>
]]></content>
  </entry>
  <entry>
    <title>起点</title>
    <url>/blog/posts/4f2fecf/</url>
    <content><![CDATA[<p>写博客的原因呢大概就是发现自己有时候明明百度过一遍的问题第二天又忘记了，再百度一遍、再忘记….。<br>为了防止这个情况再次发生，我决定用博客记录开发过程中遇到的问题，下次遇到的时候找起来方便一点(^_^)</p>
]]></content>
  </entry>
  <entry>
    <title>idea好用的插件（持续更新慢慢记录）</title>
    <url>/blog/posts/816bbc3f/</url>
    <content><![CDATA[<h3 id="（一）阿里代码扫描插件安装-（IDEA）"><a href="#（一）阿里代码扫描插件安装-（IDEA）" class="headerlink" title="（一）阿里代码扫描插件安装 （IDEA）"></a>（一）阿里代码扫描插件安装 （IDEA）</h3><p>File -&gt; Setting -&gt; Plugins<br>搜索全称 Alibaba Java Coding Guidelines  或者 alibaba   ,然后安装第一个，重启idea… </p>
<p>使用的时候鼠标右键项目，编码规约扫描。  over over</p>
<h3 id="（二）保存自动格式化-idea插件（save-Actions）"><a href="#（二）保存自动格式化-idea插件（save-Actions）" class="headerlink" title="（二）保存自动格式化-idea插件（save Actions）"></a>（二）保存自动格式化-idea插件（save Actions）</h3><p>2020年12月8日今天代码质检，领导说保持良好的代码规范与风格很重要，就安利了一款代码格式化的插件。<br>IntelliJ 默认是自动保存的，因此很多时候修改后就出现：代码没有格式化、存在无用的import。<br>其实IntelliJ  Save Action就是一个实用的插件可以帮我们提高效率。</p>
<p>File -&gt; Setting -&gt; Plugins<br>搜索 save action 重启idea…<br><img src="https://blog-1258868913.cos.ap-chongqing.myqcloud.com//imgideaplug2-1.png" alt="图2-1.png"></p>
<p>配置插件<br>打开idea的插件简单配置<br><img src="https://blog-1258868913.cos.ap-chongqing.myqcloud.com//imgideaplug2-2.png" alt="图2-1.png"></p>
<ul>
<li>activate save actions on save，在save的时候激活，通常是crtl+s的时候</li>
<li>add a serialVersionUID，自动添加序列化id</li>
<li>optimize imports，没有用的imports代码全部删除掉，免得以后自己按快捷键删了。。</li>
<li>其他功能，看下英语提示即可</li>
</ul>
<h3 id="（三）打印Mybatis-执行sql"><a href="#（三）打印Mybatis-执行sql" class="headerlink" title="（三）打印Mybatis 执行sql"></a>（三）打印Mybatis 执行sql</h3><p>File -&gt; Setting -&gt; Plugins<br>搜索  Mybatis Log plugin  重启idea…</p>
<p><img src="https://blog-1258868913.cos.ap-chongqing.myqcloud.com//imgideaplug3-1.png" alt="图3-1.png"></p>
]]></content>
  </entry>
  <entry>
    <title>java 8 stream第一篇：基本使用</title>
    <url>/blog/posts/1dc7e74b/</url>
    <content><![CDATA[<h3 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h3><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p>
<ul>
<li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li>
<li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li>
<li>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li>
</ul>
<h3 id="一：流的生成方法"><a href="#一：流的生成方法" class="headerlink" title="一：流的生成方法"></a>一：流的生成方法</h3><p>在 Java 8 中, 集合接口有两个方法来生成流：</p>
<ul>
<li>stream()–为集合创建串行流。</li>
<li>parallelStream()–为集合创建并行流。</li>
</ul>
<h4 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list =  Arrays.asList(1,2,3,4,5,6,7,8,9);</span><br><span class="line">list.stream().forEach(System.out::println);//顺序执行</span><br><span class="line">list.parallelStream().forEach(System.out::println);//并行执行，提高程序运行效率。但是如果使用不当可能会发生线程安全的问题。</span><br></pre></td></tr></table></figure>

<h4 id="skip-n-跳过stream中的前n个元素-n不能为负值。如果n大于stream的大小，则返回空stream"><a href="#skip-n-跳过stream中的前n个元素-n不能为负值。如果n大于stream的大小，则返回空stream" class="headerlink" title="skip(n)跳过stream中的前n个元素 n不能为负值。如果n大于stream的大小，则返回空stream"></a>skip(n)跳过stream中的前n个元素 n不能为负值。如果n大于stream的大小，则返回空stream</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list.stream().skip(5).forEach(e-&gt;</span><br><span class="line">    System.out.print(e+<span class="string">&quot; &quot;</span>)</span><br><span class="line">);</span><br><span class="line">//结果：6,7,8,9</span><br></pre></td></tr></table></figure>

<h4 id="limit-n-返回不超过请求大小的stream的中间操作-n参数不能为负数"><a href="#limit-n-返回不超过请求大小的stream的中间操作-n参数不能为负数" class="headerlink" title="limit(n)返回不超过请求大小的stream的中间操作,n参数不能为负数"></a>limit(n)返回不超过请求大小的stream的中间操作,n参数不能为负数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list =  Arrays.asList(1,2,3,4,5,6,7,8,9);</span><br><span class="line">list.stream().<span class="built_in">limit</span>(5).forEach(e-&gt;</span><br><span class="line">        System.out.print(e+<span class="string">&quot; &quot;</span>)</span><br><span class="line">);</span><br><span class="line">//结果：1 2 3 4 5</span><br></pre></td></tr></table></figure>


<h4 id="skip和limit配合使用实现分页"><a href="#skip和limit配合使用实现分页" class="headerlink" title="skip和limit配合使用实现分页"></a>skip和limit配合使用实现分页</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 实现分页效果</span><br><span class="line"> * @param list 数据源</span><br><span class="line"> * @param pageSize 页码</span><br><span class="line"> * @param PageNum 每页大小</span><br><span class="line"> * */</span><br><span class="line">public static void skipAndLimitDemo(List&lt;Integer&gt; list,int pageSize,int PageNum)&#123;</span><br><span class="line">    list.stream().skip((pageSize-1)*PageNum).<span class="built_in">limit</span>(PageNum).forEach(e-&gt;</span><br><span class="line">            System.out.print(e+<span class="string">&quot; &quot;</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sorted排序"><a href="#sorted排序" class="headerlink" title="sorted排序"></a>sorted排序</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list.stream().sorted().forEach(e-&gt;</span><br><span class="line">        System.out.print(e+<span class="string">&quot; &quot;</span>)</span><br><span class="line">);//默认正序</span><br><span class="line"></span><br><span class="line">list.stream().sorted(Comparator.comparing(Integer::intValue).reversed()).forEach(e-&gt;</span><br><span class="line">        System.out.print(e+<span class="string">&quot; &quot;</span>)</span><br><span class="line">);</span><br><span class="line">//reversed() 倒序</span><br></pre></td></tr></table></figure>

<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int sum = list.stream().reduce(0,(x,y)-&gt;x+y);</span><br><span class="line">int max = list.stream().max((x,y)-&gt;x-y).get();</span><br><span class="line">int min = list.stream().min((x,y)-&gt;x-y).get();</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>javastream去重</title>
    <url>/blog/posts/d7d72081/</url>
    <content><![CDATA[<p>List<User> list = new ArrayList&lt;&gt;();<br>list.add(new User(“张三”,”1”));<br>list.add(new User(“张三”,”2”));<br>list.add(new User(“张三”,”3”));<br>list.add(new User(“张三”,”2”));</User></p>
<h4 id="普通去重"><a href="#普通去重" class="headerlink" title="普通去重"></a>普通去重</h4><p>list.stream().distinct().stream().forEach(e-&gt;{<br>    System.out.println(e.getAge());//结果:1,2,3<br>});</p>
<h4 id="去重姓名属性字段：取第一条"><a href="#去重姓名属性字段：取第一条" class="headerlink" title="去重姓名属性字段：取第一条"></a>去重姓名属性字段：取第一条</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparing(f -&gt; f.getName()))), ArrayList::new))</span><br><span class="line">    .forEach(e-&gt;&#123;</span><br><span class="line">        System.out.println(e.getAge());//结果 1</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>


<h4 id="去重姓名属性字段：取最后一条（最新）"><a href="#去重姓名属性字段：取最后一条（最新）" class="headerlink" title="去重姓名属性字段：取最后一条（最新）"></a>去重姓名属性字段：取最后一条（最新）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Map&lt;String, User&gt; appleMap = list.stream().collect(Collectors.toMap(User::getName, a -&gt; a, (oldValue, newValue) -&gt; newValue));</span><br><span class="line">list = new ArrayList(appleMap.values());</span><br><span class="line">list.stream().forEach(e-&gt;&#123;</span><br><span class="line">    System.out.println(e.getAge());//结果 2</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle中merge into使用</title>
    <url>/blog/posts/3fd8a8dc/</url>
    <content><![CDATA[<h4 id="本人使用场景：批量导入"><a href="#本人使用场景：批量导入" class="headerlink" title="本人使用场景：批量导入"></a>本人使用场景：批量导入</h4><span style="color: red;font-size:16px ">
 作用:判断Ｂ表和Ａ表是否满足ON中条件，如果满足则用B表去更新A表，如果不满足，则将B表数据插入A表但是有很多可选项
</span>


<h3 id="merge-into的形式："><a href="#merge-into的形式：" class="headerlink" title="merge into的形式："></a>merge into的形式：</h3> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MERGE INTO tableA a</span><br><span class="line">USING [tableB or sql语句] b </span><br><span class="line">ON ( a.code&#x3D;b.code )</span><br><span class="line">WHEN MATCHED THEN</span><br><span class="line">[ update sql]</span><br><span class="line">WHEN NOT MATCHED THEN</span><br><span class="line">[INSERT sql]</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
</search>
